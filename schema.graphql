### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreatePostInputType {
  audience: PostAudienceEnum
  checkIn: String
  content: String
  feeling: String
  gif: String
  images: [String]
  specificAudienceFriends: [ID]
  taggedFriends: [ID]
  title: String!
}

type FetchPostsEdges {
  cursor: ID!
  node: Post!
}

type FetchPostsPageInfo {
  endCursor: ID
  hasNextPage: Boolean!
}

type FetchPostsQuery {
  edges: [FetchPostsEdges!]!
  pageInfo: FetchPostsPageInfo!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
}

type Mutation {
  createPost(data: CreatePostInputType!): Post!
  login(data: LoginInput!): LoginResponse!
  signup(data: SignupInput!): Boolean!
  togglePostLike(id: ID!): Post!
}

type Post {
  _count: PostRelationCount!
  audience: PostAudienceEnum!
  author: User!
  authorId: ID!
  checkIn: String
  content: String
  createdAt: String!
  feeling: String
  gif: String
  hasAlreadyLiked: Boolean
  id: ID!
  images: [String]!
  likes(take: Int): [User!]!
  specificAudienceFriends: [User!]!
  taggedFriends: [User!]!
  title: String!
  updatedAt: String!
}

"""Who can see your post"""
enum PostAudienceEnum {
  FRIENDS
  ONLY_ME
  PUBLIC
  SPECIFIC
}

type PostRelationCount {
  likes: Int
}

type Query {
  me: User!
  post(id: ID!): Post!
  posts(cursor: ID, take: Int): FetchPostsQuery!
  users: [User!]!
}

input SignupInput {
  email: String!
  firstName: String!
  gender: UserGender!
  lastName: String
  password: String!
}

type User {
  coverImage: String
  createdAt: String!
  email: String!
  firstName: String!
  gender: UserGender
  id: ID!
  isActive: Boolean!
  isEmailVerified: Boolean!
  lastName: String
  posts: [Post!]!
  profileImage: String
  role: UserRole!
  specificAudienceInPosts: [User!]!
  taggedInPosts: [Post!]!
  updatedAt: String!
}

"""user gender"""
enum UserGender {
  FEMALE
  MALE
  OTHER
}

"""Resource access rules"""
enum UserRole {
  ADMIN
  USER
}
