/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreatePostInputType: { // input type
    audience?: NexusGenEnums['PostAudienceEnum'] | null; // PostAudienceEnum
    checkIn?: string | null; // String
    content?: string | null; // String
    feeling?: string | null; // String
    gif?: string | null; // String
    images?: Array<string | null> | null; // [String]
    specificAudienceFriends?: Array<string | null> | null; // [ID]
    taggedFriends?: Array<string | null> | null; // [ID]
    title: string; // String!
  }
  LoginInputType: { // input type
    email: string; // String!
    password: string; // String!
  }
  SignupInputType: { // input type
    email: string; // String!
    firstName: string; // String!
    gender: NexusGenEnums['UserGender']; // UserGender!
    lastName?: string | null; // String
    password: string; // String!
  }
}

export interface NexusGenEnums {
  PostAudienceEnum: "FRIENDS" | "ONLY_ME" | "PUBLIC" | "SPECIFIC"
  UserGender: "FEMALE" | "MALE" | "OTHER"
  UserRole: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CreatePostEdges: { // root type
    node: NexusGenRootTypes['Post']; // Post!
  }
  CreatePostMutation: { // root type
    edges: NexusGenRootTypes['CreatePostEdges']; // CreatePostEdges!
  }
  FetchPostEdge: { // root type
    node: NexusGenRootTypes['Post']; // Post!
  }
  FetchPostQuery: { // root type
    edge: NexusGenRootTypes['FetchPostEdge']; // FetchPostEdge!
  }
  FetchPostsEdges: { // root type
    cursor: string; // ID!
    node: NexusGenRootTypes['Post']; // Post!
  }
  FetchPostsPageInfo: { // root type
    endCursor?: string | null; // ID
    hasNextPage: boolean; // Boolean!
  }
  FetchPostsQuery: { // root type
    edges: NexusGenRootTypes['FetchPostsEdges'][]; // [FetchPostsEdges!]!
    pageInfo: NexusGenRootTypes['FetchPostsPageInfo']; // FetchPostsPageInfo!
  }
  LoginResponseEdgesType: { // root type
    accessToken: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  LoginResponseType: { // root type
    edges: NexusGenRootTypes['LoginResponseEdgesType']; // LoginResponseEdgesType!
  }
  MeResponseEdgesType: { // root type
    node: NexusGenRootTypes['User']; // User!
  }
  MeResponseType: { // root type
    edges: NexusGenRootTypes['MeResponseEdgesType']; // MeResponseEdgesType!
  }
  Mutation: {};
  Post: { // root type
    audience: NexusGenEnums['PostAudienceEnum']; // PostAudienceEnum!
    authorId: string; // ID!
    checkIn?: string | null; // String
    content?: string | null; // String
    createdAt: string; // String!
    feeling?: string | null; // String
    gif?: string | null; // String
    id: string; // ID!
    images: Array<string | null>; // [String]!
    title: string; // String!
    updatedAt: string; // String!
  }
  Query: {};
  SignupResponseEdgesType: { // root type
    node?: NexusGenRootTypes['User'] | null; // User
  }
  SignupResponseType: { // root type
    edges: NexusGenRootTypes['SignupResponseEdgesType']; // SignupResponseEdgesType!
  }
  User: { // root type
    coverImage?: string | null; // String
    createdAt: string; // String!
    email: string; // String!
    firstName: string; // String!
    gender?: NexusGenEnums['UserGender'] | null; // UserGender
    id: string; // ID!
    isActive: boolean; // Boolean!
    isEmailVerified: boolean; // Boolean!
    lastName?: string | null; // String
    profileImage?: string | null; // String
    role: NexusGenEnums['UserRole']; // UserRole!
    updatedAt: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CreatePostEdges: { // field return type
    node: NexusGenRootTypes['Post']; // Post!
  }
  CreatePostMutation: { // field return type
    edges: NexusGenRootTypes['CreatePostEdges']; // CreatePostEdges!
  }
  FetchPostEdge: { // field return type
    node: NexusGenRootTypes['Post']; // Post!
  }
  FetchPostQuery: { // field return type
    edge: NexusGenRootTypes['FetchPostEdge']; // FetchPostEdge!
  }
  FetchPostsEdges: { // field return type
    cursor: string; // ID!
    node: NexusGenRootTypes['Post']; // Post!
  }
  FetchPostsPageInfo: { // field return type
    endCursor: string | null; // ID
    hasNextPage: boolean; // Boolean!
  }
  FetchPostsQuery: { // field return type
    edges: NexusGenRootTypes['FetchPostsEdges'][]; // [FetchPostsEdges!]!
    pageInfo: NexusGenRootTypes['FetchPostsPageInfo']; // FetchPostsPageInfo!
  }
  LoginResponseEdgesType: { // field return type
    accessToken: string; // String!
    node: NexusGenRootTypes['User']; // User!
  }
  LoginResponseType: { // field return type
    edges: NexusGenRootTypes['LoginResponseEdgesType']; // LoginResponseEdgesType!
  }
  MeResponseEdgesType: { // field return type
    node: NexusGenRootTypes['User']; // User!
  }
  MeResponseType: { // field return type
    edges: NexusGenRootTypes['MeResponseEdgesType']; // MeResponseEdgesType!
  }
  Mutation: { // field return type
    createPost: NexusGenRootTypes['CreatePostMutation']; // CreatePostMutation!
    login: NexusGenRootTypes['LoginResponseType']; // LoginResponseType!
    signup: NexusGenRootTypes['SignupResponseType']; // SignupResponseType!
  }
  Post: { // field return type
    audience: NexusGenEnums['PostAudienceEnum']; // PostAudienceEnum!
    author: NexusGenRootTypes['User']; // User!
    authorId: string; // ID!
    checkIn: string | null; // String
    content: string | null; // String
    createdAt: string; // String!
    feeling: string | null; // String
    gif: string | null; // String
    id: string; // ID!
    images: Array<string | null>; // [String]!
    specificAudienceFriends: NexusGenRootTypes['User'][]; // [User!]!
    taggedFriends: NexusGenRootTypes['User'][]; // [User!]!
    title: string; // String!
    updatedAt: string; // String!
  }
  Query: { // field return type
    me: NexusGenRootTypes['MeResponseType']; // MeResponseType!
    post: NexusGenRootTypes['FetchPostQuery']; // FetchPostQuery!
    posts: NexusGenRootTypes['FetchPostsQuery']; // FetchPostsQuery!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  SignupResponseEdgesType: { // field return type
    node: NexusGenRootTypes['User'] | null; // User
  }
  SignupResponseType: { // field return type
    edges: NexusGenRootTypes['SignupResponseEdgesType']; // SignupResponseEdgesType!
  }
  User: { // field return type
    coverImage: string | null; // String
    createdAt: string; // String!
    email: string; // String!
    firstName: string; // String!
    gender: NexusGenEnums['UserGender'] | null; // UserGender
    id: string; // ID!
    isActive: boolean; // Boolean!
    isEmailVerified: boolean; // Boolean!
    lastName: string | null; // String
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    profileImage: string | null; // String
    role: NexusGenEnums['UserRole']; // UserRole!
    specificAudienceInPosts: NexusGenRootTypes['User'][]; // [User!]!
    taggedInPosts: NexusGenRootTypes['Post'][]; // [Post!]!
    updatedAt: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  CreatePostEdges: { // field return type name
    node: 'Post'
  }
  CreatePostMutation: { // field return type name
    edges: 'CreatePostEdges'
  }
  FetchPostEdge: { // field return type name
    node: 'Post'
  }
  FetchPostQuery: { // field return type name
    edge: 'FetchPostEdge'
  }
  FetchPostsEdges: { // field return type name
    cursor: 'ID'
    node: 'Post'
  }
  FetchPostsPageInfo: { // field return type name
    endCursor: 'ID'
    hasNextPage: 'Boolean'
  }
  FetchPostsQuery: { // field return type name
    edges: 'FetchPostsEdges'
    pageInfo: 'FetchPostsPageInfo'
  }
  LoginResponseEdgesType: { // field return type name
    accessToken: 'String'
    node: 'User'
  }
  LoginResponseType: { // field return type name
    edges: 'LoginResponseEdgesType'
  }
  MeResponseEdgesType: { // field return type name
    node: 'User'
  }
  MeResponseType: { // field return type name
    edges: 'MeResponseEdgesType'
  }
  Mutation: { // field return type name
    createPost: 'CreatePostMutation'
    login: 'LoginResponseType'
    signup: 'SignupResponseType'
  }
  Post: { // field return type name
    audience: 'PostAudienceEnum'
    author: 'User'
    authorId: 'ID'
    checkIn: 'String'
    content: 'String'
    createdAt: 'String'
    feeling: 'String'
    gif: 'String'
    id: 'ID'
    images: 'String'
    specificAudienceFriends: 'User'
    taggedFriends: 'User'
    title: 'String'
    updatedAt: 'String'
  }
  Query: { // field return type name
    me: 'MeResponseType'
    post: 'FetchPostQuery'
    posts: 'FetchPostsQuery'
    users: 'User'
  }
  SignupResponseEdgesType: { // field return type name
    node: 'User'
  }
  SignupResponseType: { // field return type name
    edges: 'SignupResponseEdgesType'
  }
  User: { // field return type name
    coverImage: 'String'
    createdAt: 'String'
    email: 'String'
    firstName: 'String'
    gender: 'UserGender'
    id: 'ID'
    isActive: 'Boolean'
    isEmailVerified: 'Boolean'
    lastName: 'String'
    posts: 'Post'
    profileImage: 'String'
    role: 'UserRole'
    specificAudienceInPosts: 'User'
    taggedInPosts: 'Post'
    updatedAt: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      data: NexusGenInputs['CreatePostInputType']; // CreatePostInputType!
    }
    login: { // args
      data: NexusGenInputs['LoginInputType']; // LoginInputType!
    }
    signup: { // args
      data: NexusGenInputs['SignupInputType']; // SignupInputType!
    }
  }
  Query: {
    post: { // args
      id: string; // ID!
    }
    posts: { // args
      cursor?: string | null; // ID
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}